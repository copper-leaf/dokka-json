{
  "ownKey": "index",
  "childrenPages": {"changelog": {
    "ownKey": "changelog",
    "ownPages": [{
      "reference": {
        "path": "",
        "baseUrl": "https://copper-leaf.github.io/kodiak",
        "fileName": "changelog",
        "extension": "html",
        "usePrettyUrl": true,
        "link": "https://copper-leaf.github.io/kodiak/changelog"
      },
      "description": "",
      "title": "Changelog",
      "content": ""
    }]
  }},
  "ownPages": [
    {
      "reference": {
        "path": "",
        "baseUrl": "https://copper-leaf.github.io/kodiak",
        "fileName": "",
        "extension": "html",
        "usePrettyUrl": true,
        "link": "https://copper-leaf.github.io/kodiak"
      },
      "description": "",
      "title": "Home",
      "content": "<h1 id=\"kodiak\"><a href=\"#kodiak\" id=\"kodiak\" class=\"anchor\"><\/a>kodiak<\/h1>\n<p>A collection of wrappers around various code documentation tools which produces a common JSON output readable by Orchid.<\/p>\n<p><img src=\"https://img.shields.io/github/v/release/copper-leaf/kodiak\" alt=\"GitHub release (latest by date)\" />\n<img src=\"https://img.shields.io/maven-central/v/io.github.copper-leaf/kodiak-core\" alt=\"Maven Central\" />\n<img src=\"https://img.shields.io/badge/Kotlin-1.4.32-orange\" alt=\"Kotlin Version\" /><\/p>\n<h2 id=\"overview\"><a href=\"#overview\" id=\"overview\" class=\"anchor\"><\/a>Overview<\/h2>\n<p>Most code documentation tools work by generating an HTML site. They have to do a lot of work to format navigate the\ncode's internal structure, and then create a website that very often, looks quite awful. It would be better for everyone\nif the language designers only needed to produce a code model, and then let someone else do the hard work of turning\nthat model into a website.<\/p>\n<p><a href=\"https://orchid.netlify.com/\">Orchid<\/a> is that tool that creates a beautiful website for your code docs. This project is\nthe other side of that coin which produces a model that Orchid can use to generate those sites.<\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<pre><code class=\"language-kotlin\">repositories {\n    mavenCentral()\n}\n\n// for plain JVM projects\ndependencies {\n    implementation(&quot;com.eden.kodiak:javadoc-runner:1.0.0&quot;)\n    implementation(&quot;com.eden.kodiak:dokka-runner:1.0.0&quot;)\n    implementation(&quot;com.eden.kodiak:groovydoc-runner:1.0.0&quot;)\n    implementation(&quot;com.eden.kodiak:swiftdoc-runner:1.0.0&quot;)\n}\n<\/code><\/pre>\n<h2 id=\"targets\"><a href=\"#targets\" id=\"targets\" class=\"anchor\"><\/a>Targets<\/h2>\n<h3 id=\"java-javadoc\"><a href=\"#java-javadoc\" id=\"java-javadoc\" class=\"anchor\"><\/a>Java (Javadoc)<\/h3>\n<pre><code class=\"language-kotlin\">repositories {\n    mavenCentral()\n}\ndependencies {\n    implementation(&quot;com.eden.kodiak:javadoc-runner:1.0.0&quot;)\n}\n<\/code><\/pre>\n<pre><code class=\"language-kotlin\">var cacheDir: Path = Files.createTempDirectory(&quot;javadocCache&quot;)\nval runner: JavadocInvoker = JavadocInvokerImpl(cacheDir)\n\nval outputDir = File(&quot;build/javadoc&quot;).canonicalFile.toPath()\noutputDir.toFile().deleteRecursively()\noutputDir.toFile().mkdirs()\n\nval rootDoc = runner.getRootDoc(\n    listOf(\n        File(&quot;src/main/java&quot;).canonicalFile.toPath()\n    ),\n    outputDir\n) { inputStream -&gt; IOStreamUtils.InputStreamPrinter(inputStream, null) }\n\nrootDoc.packages.forEach { processPackage(it) }\nrootDoc.classes.forEach { processClass(it) }\n<\/code><\/pre>\n<ul>\n<li>\n<p>skip by including <code>@suppress<\/code> in its comments<\/p>\n<ul>\n<li>classes<\/li>\n<li>constructors<\/li>\n<li>fields<\/li>\n<li>methods<\/li>\n<\/ul>\n<\/li>\n<li>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html\">Javadoc<\/a><\/p>\n<\/li>\n<\/ul>\n<h3 id=\"kotlin-dokka\"><a href=\"#kotlin-dokka\" id=\"kotlin-dokka\" class=\"anchor\"><\/a>Kotlin (Dokka)<\/h3>\n<pre><code class=\"language-kotlin\">repositories {\n    mavenCentral()\n}\ndependencies {\n    implementation(&quot;com.eden.kodiak:dokka-runner:1.0.0&quot;)\n}\n<\/code><\/pre>\n<pre><code class=\"language-kotlin\">var cacheDir: Path = Files.createTempDirectory(&quot;dokkaCache&quot;)\nval runner: KotlindocInvoker = KotlindocInvokerImpl(cacheDir)\n\nval outputDir = File(&quot;build/dokka&quot;).canonicalFile.toPath()\noutputDir.toFile().deleteRecursively()\noutputDir.toFile().mkdirs()\n\nval rootDoc = runner.getRootDoc(\n    listOf(\n        File(&quot;src/main/java&quot;).canonicalFile.toPath(),\n        File(&quot;src/main/kotlin&quot;).canonicalFile.toPath()\n    ),\n    outputDir\n) { inputStream -&gt; IOStreamUtils.InputStreamPrinter(inputStream, null) }\n\nrootDoc.packages.forEach { processPackage(it) }\nrootDoc.classes.forEach { processClass(it) }\n<\/code><\/pre>\n<ul>\n<li>\n<p>skip by including <code>@suppress<\/code> in its comments<\/p>\n<ul>\n<li>classes<\/li>\n<li>constructors<\/li>\n<li>fields<\/li>\n<li>methods<\/li>\n<\/ul>\n<\/li>\n<li>\n<p><a href=\"https://github.com/Kotlin/dokka\">Dokka<\/a><\/p>\n<\/li>\n<\/ul>\n<h3 id=\"groovy-groovydoc\"><a href=\"#groovy-groovydoc\" id=\"groovy-groovydoc\" class=\"anchor\"><\/a>Groovy (Groovydoc)<\/h3>\n<pre><code class=\"language-kotlin\">repositories {\n    mavenCentral()\n}\ndependencies {\n    implementation(&quot;com.eden.kodiak:groovydoc-runner:1.0.0&quot;)\n}\n<\/code><\/pre>\n<pre><code class=\"language-kotlin\">var cacheDir: Path = Files.createTempDirectory(&quot;groovydocCache&quot;)\nval runner: GroovydocInvoker = GroovydocInvokerImpl(cacheDir)\n\nval outputDir = File(&quot;build/groovydoc&quot;).canonicalFile.toPath()\noutputDir.toFile().deleteRecursively()\noutputDir.toFile().mkdirs()\n\nval rootDoc = runner.getRootDoc(\n    listOf(\n        File(&quot;src/main/java&quot;).canonicalFile.toPath(),\n        File(&quot;src/main/groovy&quot;).canonicalFile.toPath()\n    ),\n    outputDir\n) { inputStream -&gt; IOStreamUtils.InputStreamPrinter(inputStream, null) }\n\nrootDoc.packages.forEach { processPackage(it) }\nrootDoc.classes.forEach { processClass(it) }\n<\/code><\/pre>\n<ul>\n<li>\n<p>skip by including <code>@suppress<\/code> in its comments<\/p>\n<ul>\n<li>classes<\/li>\n<li>constructors<\/li>\n<li>fields<\/li>\n<li>methods<\/li>\n<\/ul>\n<\/li>\n<li>\n<p><a href=\"http://docs.groovy-lang.org/docs/next/html/documentation/#_groovydoc_the_groovy_java_documentation_generator\">Groovydoc<\/a><\/p>\n<\/li>\n<\/ul>\n<h3 id=\"swift-sourcekitten\"><a href=\"#swift-sourcekitten\" id=\"swift-sourcekitten\" class=\"anchor\"><\/a>Swift (Sourcekitten)<\/h3>\n<pre><code class=\"language-kotlin\">repositories {\n    mavenCentral()\n}\ndependencies {\n    implementation(&quot;com.eden.kodiak:swiftdoc-runner:1.0.0&quot;)\n}\n<\/code><\/pre>\n<pre><code class=\"language-kotlin\">var cacheDir: Path = Files.createTempDirectory(&quot;swiftdocCache&quot;)\nval runner: SwiftdocInvoker = SwiftdocInvokerImpl(cacheDir)\n\nval outputDir = File(&quot;build/swiftdoc&quot;).canonicalFile.toPath()\noutputDir.toFile().deleteRecursively()\noutputDir.toFile().mkdirs()\n\nval rootDoc = runner.getRootDoc(\n    listOf(\n        File(&quot;src/main/swift&quot;).canonicalFile.toPath()\n    ),\n    outputDir\n) { inputStream -&gt; IOStreamUtils.InputStreamPrinter(inputStream, null) }\n\nrootDoc.sourceFiles.forEach { processSourceFile(it) }\nrootDoc.classes.forEach { processClass(it) }\n<\/code><\/pre>\n<ul>\n<li>\n<p>skip by including <code>- suppress<\/code> in its comments<\/p>\n<ul>\n<li>classes<\/li>\n<li>initializers<\/li>\n<li>fields<\/li>\n<li>methods<\/li>\n<\/ul>\n<\/li>\n<li>\n<p><a href=\"https://github.com/jpsim/SourceKitten\">SourceKitten<\/a><\/p>\n<\/li>\n<\/ul>\n"
    },
    {
      "reference": {
        "path": "",
        "baseUrl": "https://copper-leaf.github.io/kodiak",
        "fileName": "404",
        "extension": "html",
        "usePrettyUrl": false,
        "link": "https://copper-leaf.github.io/kodiak/404.html"
      },
      "description": "",
      "title": "Not Found",
      "content": ""
    }
  ]
}